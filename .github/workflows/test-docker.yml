name: Test with Docker CI

on:
  push:
    branches: [ feat/add-test-action ]
  pull_request:
    branches: [ feat/add-test-action, test-for-pr-action ]

jobs:
  integration-test-with-docker:
    runs-on: ubuntu-latest

    # services:
    #   db:
    #     image: mariadb:10
    #     env:
    #       MYSQL_DATABASE: fosslight
    #       MYSQL_PASSWORD: fosslight
    #       MYSQL_USER: fosslight
    #       MYSQL_ROOT_PASSWORD: fosslight
    #     ports:
    #       - 3306:3306
    #     options: -v /home/db/conf.d:/etc/mysql/conf.d
    #              -v /home/db/data:/var/lib/mysql
    #              -v "/home/db/initdb.d":"/docker-entrypoint-initdb.d"
    #              --name="fosslight_db"
    #              --health-cmd="mysqladmin ping"
    #              --health-interval=10s
    #              --health-timeout=5s
    #              --health-retries=3

    steps:
      - uses: actions/checkout@v2
      
      ### docker-compose
      - name: Start containers
        run: docker-compose up -d

      # - name: Sleep for 10 seconds
      #   uses: jakejarvis/wait-action@master
      #   with:
      #     time: '10s'
      
      - name: Check running containers
        run: docker-compose ps

      # - name: Check if file exists
      #   run: docker exec fosslight_db ls -la ./docker-entrypoint-initdb.d/

      # - name: Check DB container running
      #   run: docker exec -i fosslight_db mysql -ufosslight -pfosslight -e "show databases;"

      # - name: Build the Docker image
      #   run: docker build --tag fosslight_web:1.0.0 .
        
      # - name: Docker run
      #   run: docker run -d -p 8180:8180 --name fosslight_web fosslight_web:1.0.0

      # PR Fail
      - name: if fail
        uses: actions/github-script@0.2.0
        with:
          github-token: ${{github.token}}
          script: |
            const ref = "${{github.ref}}"
            const pull_number = Number(ref.split("/")[2])
            await github.pulls.createReview({
              ...context.repo,
              pull_number,
              body: "Check the test code",
              event: "REQUEST_CHANGES"
            })
            await github.pulls.update({
              ...context.repo,
              pull_number,
              state: "closed"
            })
        if: failure()